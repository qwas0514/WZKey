#include "Rijndael.h"

#ifndef RIJNDAEL_NOLOOKUP_TABLE
const byte Rijndael::sbox[256] = {
	//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16  //F
};

const byte Rijndael::sboxInv[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

const byte Rijndael::Rcon[256] = {
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d 
};

const byte Rijndael::expTable[256] = {
	0x01, 0x03, 0x05, 0x0F, 0x11, 0x33, 0x55, 0xFF, 0x1A, 0x2E, 0x72, 0x96, 0xA1, 0xF8, 0x13, 0x35,
	0x5F, 0xE1, 0x38, 0x48, 0xD8, 0x73, 0x95, 0xA4, 0xF7, 0x02, 0x06, 0x0A, 0x1E, 0x22, 0x66, 0xAA,
	0xE5, 0x34, 0x5C, 0xE4, 0x37, 0x59, 0xEB, 0x26, 0x6A, 0xBE, 0xD9, 0x70, 0x90, 0xAB, 0xE6, 0x31,
	0x53, 0xF5, 0x04, 0x0C, 0x14, 0x3C, 0x44, 0xCC, 0x4F, 0xD1, 0x68, 0xB8, 0xD3, 0x6E, 0xB2, 0xCD,
	0x4C, 0xD4, 0x67, 0xA9, 0xE0, 0x3B, 0x4D, 0xD7, 0x62, 0xA6, 0xF1, 0x08, 0x18, 0x28, 0x78, 0x88,
	0x83, 0x9E, 0xB9, 0xD0, 0x6B, 0xBD, 0xDC, 0x7F, 0x81, 0x98, 0xB3, 0xCE, 0x49, 0xDB, 0x76, 0x9A,
	0xB5, 0xC4, 0x57, 0xF9, 0x10, 0x30, 0x50, 0xF0, 0x0B, 0x1D, 0x27, 0x69, 0xBB, 0xD6, 0x61, 0xA3,
	0xFE, 0x19, 0x2B, 0x7D, 0x87, 0x92, 0xAD, 0xEC, 0x2F, 0x71, 0x93, 0xAE, 0xE9, 0x20, 0x60, 0xA0,
	0xFB, 0x16, 0x3A, 0x4E, 0xD2, 0x6D, 0xB7, 0xC2, 0x5D, 0xE7, 0x32, 0x56, 0xFA, 0x15, 0x3F, 0x41,
	0xC3, 0x5E, 0xE2, 0x3D, 0x47, 0xC9, 0x40, 0xC0, 0x5B, 0xED, 0x2C, 0x74, 0x9C, 0xBF, 0xDA, 0x75,
	0x9F, 0xBA, 0xD5, 0x64, 0xAC, 0xEF, 0x2A, 0x7E, 0x82, 0x9D, 0xBC, 0xDF, 0x7A, 0x8E, 0x89, 0x80,
	0x9B, 0xB6, 0xC1, 0x58, 0xE8, 0x23, 0x65, 0xAF, 0xEA, 0x25, 0x6F, 0xB1, 0xC8, 0x43, 0xC5, 0x54,
	0xFC, 0x1F, 0x21, 0x63, 0xA5, 0xF4, 0x07, 0x09, 0x1B, 0x2D, 0x77, 0x99, 0xB0, 0xCB, 0x46, 0xCA,
	0x45, 0xCF, 0x4A, 0xDE, 0x79, 0x8B, 0x86, 0x91, 0xA8, 0xE3, 0x3E, 0x42, 0xC6, 0x51, 0xF3, 0x0E,
	0x12, 0x36, 0x5A, 0xEE, 0x29, 0x7B, 0x8D, 0x8C, 0x8F, 0x8A, 0x85, 0x94, 0xA7, 0xF2, 0x0D, 0x17,
	0x39, 0x4B, 0xDD, 0x7C, 0x84, 0x97, 0xA2, 0xFD, 0x1C, 0x24, 0x6C, 0xB4, 0xC7, 0x52, 0xF6, 0x01
};

const byte Rijndael::logTable[256] = {
	0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1A, 0xC6, 0x4B, 0xC7, 0x1B, 0x68, 0x33, 0xEE, 0xDF, 0x03,
	0x64, 0x04, 0xE0, 0x0E, 0x34, 0x8D, 0x81, 0xEF, 0x4C, 0x71, 0x08, 0xC8, 0xF8, 0x69, 0x1C, 0xC1,
	0x7D, 0xC2, 0x1D, 0xB5, 0xF9, 0xB9, 0x27, 0x6A, 0x4D, 0xE4, 0xA6, 0x72, 0x9A, 0xC9, 0x09, 0x78,
	0x65, 0x2F, 0x8A, 0x05, 0x21, 0x0F, 0xE1, 0x24, 0x12, 0xF0, 0x82, 0x45, 0x35, 0x93, 0xDA, 0x8E,
	0x96, 0x8F, 0xDB, 0xBD, 0x36, 0xD0, 0xCE, 0x94, 0x13, 0x5C, 0xD2, 0xF1, 0x40, 0x46, 0x83, 0x38,
	0x66, 0xDD, 0xFD, 0x30, 0xBF, 0x06, 0x8B, 0x62, 0xB3, 0x25, 0xE2, 0x98, 0x22, 0x88, 0x91, 0x10,
	0x7E, 0x6E, 0x48, 0xC3, 0xA3, 0xB6, 0x1E, 0x42, 0x3A, 0x6B, 0x28, 0x54, 0xFA, 0x85, 0x3D, 0xBA,
	0x2B, 0x79, 0x0A, 0x15, 0x9B, 0x9F, 0x5E, 0xCA, 0x4E, 0xD4, 0xAC, 0xE5, 0xF3, 0x73, 0xA7, 0x57,
	0xAF, 0x58, 0xA8, 0x50, 0xF4, 0xEA, 0xD6, 0x74, 0x4F, 0xAE, 0xE9, 0xD5, 0xE7, 0xE6, 0xAD, 0xE8,
	0x2C, 0xD7, 0x75, 0x7A, 0xEB, 0x16, 0x0B, 0xF5, 0x59, 0xCB, 0x5F, 0xB0, 0x9C, 0xA9, 0x51, 0xA0,
	0x7F, 0x0C, 0xF6, 0x6F, 0x17, 0xC4, 0x49, 0xEC, 0xD8, 0x43, 0x1F, 0x2D, 0xA4, 0x76, 0x7B, 0xB7,
	0xCC, 0xBB, 0x3E, 0x5A, 0xFB, 0x60, 0xB1, 0x86, 0x3B, 0x52, 0xA1, 0x6C, 0xAA, 0x55, 0x29, 0x9D,
	0x97, 0xB2, 0x87, 0x90, 0x61, 0xBE, 0xDC, 0xFC, 0xBC, 0x95, 0xCF, 0xCD, 0x37, 0x3F, 0x5B, 0xD1,
	0x53, 0x39, 0x84, 0x3C, 0x41, 0xA2, 0x6D, 0x47, 0x14, 0x2A, 0x9E, 0x5D, 0x56, 0xF2, 0xD3, 0xAB,
	0x44, 0x11, 0x92, 0xD9, 0x23, 0x20, 0x2E, 0x89, 0xB4, 0x7C, 0xB8, 0x26, 0x77, 0x99, 0xE3, 0xA5,
	0x67, 0x4A, 0xED, 0xDE, 0xC5, 0x31, 0xFE, 0x18, 0x0D, 0x63, 0x8C, 0x80, 0xC0, 0xF7, 0x70, 0x07
};

const byte Rijndael::shiftRowTable[16] = { 
	0x00, 0x05, 0x0A, 0x0F, 0x04, 0x09, 0x0E, 0x03,
	0x08, 0x0D, 0x02, 0x07,	0x0C, 0x01, 0x06, 0x0B 
};

const byte Rijndael::shiftRowInvTable[16] = {
	0x00, 0x0D, 0x0A, 0x07, 0x04, 0x01, 0x0E, 0x0B, 
	0x08, 0x05, 0x02, 0x0F, 0x0C, 0x09, 0x06, 0x03
};

byte Rijndael::getSBoxValue(byte num) {
	return sbox[num];
}

byte Rijndael::getSBoxInvValue(byte num) {
	return sboxInv[num];
}

byte Rijndael::getRconValue(byte num) {
	return Rcon[num];
}

byte Rijndael::getExpTableValue(byte num) {
	return expTable[num];
}

byte Rijndael::getLogTableValue(byte num) {
	return logTable[num];
}

byte Rijndael::getShiftRowsValue(byte num) {
	return shiftRowTable[num];
}

byte Rijndael::getShiftRowsInvValue(byte num) {
	return shiftRowInvTable[num];
}

#endif

void Rijndael::setInitVector(int *iv) {
	memcpy(m_initVector, iv, 4);
}

int Rijndael::getInitVector() const {
	return *(int *)m_initVector;
}

void Rijndael::setKey(Rijndael::Key *key) {
	m_key.expandedKey = key->expandedKey;
    m_key.expandedKeySize = key->expandedKeySize;
}

Rijndael::Key Rijndael::getKey() const {
	return m_key;
}

void Rijndael::expandKey(byte *key, byte keySize, byte *expandedKey, byte expandedKeySize) {
	/* current expanded keySize, in bytes */
	int currentSize = 0;
	int rconIteration = 1;
	// temporary 4-byte variable
	byte temp[4] = { 0 };
	/* set the 16,24,32 bytes of the expanded key to the input key */
	memcpy_s(expandedKey, expandedKeySize, key, keySize);
	currentSize = keySize;

	while (currentSize < expandedKeySize) {
		/* assign the previous 4 bytes to the temporary value temp */
		for (int i = 0; i < 4; i++) {
			temp[i] = expandedKey[(currentSize - 4) + i];
		}

		/* every 16,24,32 bytes we apply the core schedule to temp
		* and increment rconIteration afterwards
		*/
		if (currentSize % keySize == 0) {
			//core(temp, rconIteration++);
			byte tmp = temp[0];
			for (int i = 0; i < 3; i++)
				temp[i] = temp[i + 1];
			temp[3] = tmp;

			/* apply S-Box substitution on all 4 parts of the 32-bit word */
			for (int i = 0; i < 4; ++i)	{
				temp[i] = getSBoxValue(temp[i]);
			}

			/* XOR the output of the rcon operation with i to the first part (leftmost) only */
			temp[0] ^= getRconValue(rconIteration++);
		}

		/* For 256-bit keys, we add an extra sbox to the calculation */
		if (keySize == 32 && ((currentSize % keySize) == 16)) {
			for (int i = 0; i < 4; i++) {
				temp[i] = getSBoxValue(temp[i]);
			}
		}

		/* We XOR t with the four-byte block 16,24,32 bytes before the new expanded key.
		* This becomes the next four bytes in the expanded key.
		*/
		for (int i = 0; i < 4; i++) {
			expandedKey[currentSize] = expandedKey[currentSize - keySize] ^ temp[i];
			currentSize++;
		}
	}
}

void Rijndael::addRoundKey(byte *state, byte *roundKey) {
	for (int i = 0; i < 16; i++) {
		state[i] ^= roundKey[i];
	}
}

void Rijndael::shiftRows(byte *state) {
#ifndef RIJNDAEL_NOLOOKUP_TABLE
	byte temp[16];
	memcpy(temp, state, 16);
	for (int i = 0; i < 16; i++) {
		state[i] = temp[getShiftRowsValue(i)];
	}
#else
	byte temp[4];
	for (int row = 1; row < 4; row++) {
		for (int column = 0; column < 4; column++) {
			temp[column] = state[(row * 4) + (column + row) % 4];
		}
		for (int column = 0; column < 4; column++) {
			state[(row * 4) + column] = temp[column];
		}
	}
#endif
}

void Rijndael::shiftRowsInv(byte *state) {
#ifndef RIJNDAEL_NOLOOKUP_TABLE
	byte temp[16];
	memcpy(temp, state, 16);
	for (int i = 0; i < 16; i++) {
		state[i] = temp[getShiftRowsInvValue(i)];
	}
#else
	byte temp[4];
	for (int row = 1; row < 4; row++) {
		for (int column = 0; column < 4; column++) {
			temp[(column + row) % 4] = state[(row * 4) + column];
		}
		for (int column = 0; column < 4; column++) {
			state[(row * 4) + column] = temp[column];
		}
	}
#endif
}

void Rijndael::subBytes(byte *state) {
	for (int i = 0; i < 16; i++) {
		state[i] = getSBoxValue(state[i]);
	}
}
void Rijndael::subBytesInv(byte *state) {
	for (int i = 0; i < 16; i++) {
		state[i] = getSBoxInvValue(state[i]);
	}
}

byte Rijndael::FFMul(byte a, byte b) {
#ifdef RIJNDAEL_LOOKUP_TABLE
	int t = 0;;
	if (a == 0 || b == 0) return 0;
	t = getLogTableValue(a) + getLogTableValue(b);
	if (t > 255) t -= 255;
	return getExpTableValue(t);
#else
	byte highBit;
	byte p = 0;
	for (byte counter = 0; counter < 8; counter++) {
		if ((b & 1) == 1) {
			p ^= a;
		}
		highBit = (a & 0x80);
		a <<= 1;
		if (highBit == 0x80) {
			a ^= 0x1b;
		}
		b >>= 1;
	}
	return p;
#endif
}

void Rijndael::mixColumns(byte *state) {
	byte temp[4];
	int row, column;
	for (column = 0; column < 4; column++) {
		for (row = 0; row < 4; row++) {
			temp[row] = state[(column * 4) + row];
		}
		for (row = 0; row < 4; row++) {
			state[(column * 4) + row] =
				FFMul(0x02, temp[row]) ^
				FFMul(0x03, temp[(row + 1) % 4]) ^
				FFMul(0x01, temp[(row + 2) % 4]) ^
				FFMul(0x01, temp[(row + 3) % 4]);
		}
	}
}

void Rijndael::mixColumnsInv(byte *state) {
	byte temp[4];
	int row, column;
	for (column = 0; column < 4; column++) {
		for (row = 0; row < 4; row++) {
			temp[row] = state[(column * 4) + row];
		}
		for (row = 0; row < 4; row++) {
			state[(column * 4) + row] =
				FFMul(0x0E, temp[row]) ^
				FFMul(0x0B, temp[(row + 1) % 4]) ^
				FFMul(0x0D, temp[(row + 2) % 4]) ^
				FFMul(0x09, temp[(row + 3) % 4]);
		}
	}
}

void Rijndael::blockEncrypt(byte *input, byte *outBuffer) {
	byte block[16];
	memcpy(block, input, 16);

	addRoundKey(block, m_key.expandedKey);
	for (int i = 16; i < (m_key.expandedKeySize-16); i += 16) {
		subBytes(block); 
		shiftRows(block);
		mixColumns(block);
		addRoundKey(block, m_key.expandedKey + i);
	}
	subBytes(block);
	shiftRows(block);
	addRoundKey(block, (m_key.expandedKey + m_key.expandedKeySize - 16));
	
	memcpy(outBuffer, block, 16);
}

void Rijndael::blockDecrypt(byte *input, byte *outBuffer) {
	byte block[16];
	memcpy(block, input, 16);
	addRoundKey(block, (m_key.expandedKey + m_key.expandedKeySize - 16));
	shiftRowsInv(block);
	subBytesInv(block);
	for (int i = m_key.expandedKeySize - 32; i >= 16; i -= 16) {
		addRoundKey(block, m_key.expandedKey + i);
		mixColumnsInv(block);
		shiftRowsInv(block);
		subBytesInv(block);
	}
	addRoundKey(block, m_key.expandedKey);
	memcpy(outBuffer, block, 16);
}

void Rijndael::Encrypt(byte *input, byte *outBuffer, int size) {
	int numBlocks = size / 16;
	int fillSize = 16 - (size - numBlocks * 16);
	int remainingSize = 16 - fillSize;
	byte block[16];
	int *iv;

	Rijndael::Mode mode = ECB;
	switch (mode) {
		case ECB:
			for (int i = numBlocks; i > 0; i--) {
				blockEncrypt(input, outBuffer);
				input += 16;
				outBuffer += 16;
			}
			memcpy(block, input, remainingSize);
			memset(block + remainingSize, fillSize, fillSize);
			blockEncrypt(block, outBuffer);
			break;
		case CBC:
			iv = m_initVector;
			for (int i = numBlocks; i > 0; i--) {
				for (int j = 0; j < 4; j++) {
					block[j] = input[j] ^ iv[j];
				}
				blockEncrypt(input, outBuffer);
				iv = (int *)outBuffer;
				input += 16;
				outBuffer += 16;
			}
			fillSize = 16 - (size - numBlocks * 16);
			for (int i = 0; i < 16; i++) {
				block[i] = input[i] ^ iv[i];
			}
			for (int i = fillSize; i < 16; i++) {
				block[i] = (byte)remainingSize ^ iv[i];
			}
			blockEncrypt(block, outBuffer);
			break;
		case CFB:
			break;
		case CTS:
			break;
		case OFB:
			break;
	}
}

void Rijndael::Decrypt(byte *input, byte *outBuffer, int size) {
	int numBlocks = size / 16;
	int remainingSize;
	int fillSize;
	int *iv;
	byte block[16] = { 0 };
	
	Rijndael::Mode mode = ECB;
	switch (mode) {
		case ECB:
			for (int i = numBlocks-1; i > 0; i--) {
				blockDecrypt(input, outBuffer);
				input += 16;
				outBuffer += 16;
			}
			blockDecrypt(input, block);
			fillSize = block[15];
			remainingSize = 16 - fillSize;
			if (fillSize < 1 && fillSize > 16) return;
			for (int i = remainingSize; i < 16; i++) {
				if (block[i] != fillSize) return;
			}
			memcpy(outBuffer, block, remainingSize);
			break;
		case CBC:
			iv = m_initVector;
			for (int i = numBlocks - 1; i > 0; i--) {
				blockDecrypt(input, block);
				for (int j = 0; j < 4; j++) {
					((int *)block)[j] ^= iv[j];
				}
				memcpy_s(iv, 16, input, 16);
				memcpy_s(outBuffer, 16, block, 16);
				input += 16;
				outBuffer += 16;
			}
			blockDecrypt(input, block);
			for (int i = 0; i < 4; i++) {
				((int *)block)[i] ^= iv[i];
			}
			fillSize = block[15];
			if (fillSize < 1 && fillSize > 16)return;
			for (int i = 16 - fillSize; i < 16; i++) {
				if (block[i] != fillSize)return;
			}
			memcpy(outBuffer, block, 16 - fillSize);
			break;
		case CFB:
			break;
		case CTS:
			break;
		case OFB:
			break;
	}
}

Rijndael::Key Rijndael::CreateKey(byte *key, int keySize) {
	int Nr;
	switch (keySize) {
	case 16:
		Nr = 10;
		break;
	case 24:
		Nr = 12;
		break;
	case 32:
		Nr = 14;
		break;
	default:
		break;
	}
	Rijndael::Key rkey;
	rkey.expandedKeySize = (16 * (Nr + 1));
	rkey.expandedKey = new byte[rkey.expandedKeySize];
	expandKey(key, keySize, rkey.expandedKey, rkey.expandedKeySize);
	return rkey;
}